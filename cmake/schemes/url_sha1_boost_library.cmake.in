# Copyright (c) 2013, Ruslan Baratov
# All rights reserved.

cmake_minimum_required(VERSION 3.0)

include(ExternalProject) # ExternalProject_Add

# Scheme for download and install boost library

list(APPEND CMAKE_MODULE_PATH "@HUNTER_SELF@/cmake/modules")

include(CheckSymbolExists) # check_symbol_exists

include(hunter_assert_lists_equal)
include(hunter_fatal_error)
include(hunter_internal_error)
include(hunter_status_debug)
include(hunter_test_string_not_empty)

hunter_status_debug("Scheme: url_sha1_boost_library")

# Check preconditions
hunter_test_string_not_empty("@HUNTER_SELF@")
hunter_test_string_not_empty("@HUNTER_BASE@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_BASENAME@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_DOWNLOAD_DIR@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_SOURCE_DIR@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_INSTALL_DIR@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_COMPONENT@")
hunter_test_string_not_empty("@CMAKE_CXX_COMPILER@")
hunter_test_string_not_empty("@HUNTER_Boost_VERSION@")
if(MSVC)
  hunter_test_string_not_empty("@HUNTER_MSVC_ARCH@")
  hunter_test_string_not_empty("@HUNTER_MSVC_VCVARSALL@")
endif()

hunter_assert_lists_equal(@HUNTER_DOWNLOAD_SCHEME_VARIANTS@)

set_directory_properties(
    PROPERTIES
    EP_BASE
    "@HUNTER_BASE@"
)

set(
    boost_libs
    atomic
    chrono
    context
    coroutine
    date_time
    exception
    filesystem
    graph
    graph_parallel
    iostreams
    locale
    log
    math
    mpi
    program_options
    python
    random
    regex
    serialization
    signals
    system
    test
    thread
    timer
    wave
)

# Same logic in all url_sha1_boost* schemes (TODO: DRY)
if(NOT @HUNTER_Boost_VERSION@ VERSION_LESS "1.56.0")
  # >= 1.56
  list(APPEND boost_libs container)
endif()

set(libfound NO)
foreach(x ${boost_libs})
  string(COMPARE EQUAL "${x}" "@HUNTER_PACKAGE_COMPONENT@" result)
  if(result)
    set(libfound YES)
  endif()
endforeach()

if(NOT libfound)
  hunter_internal_error("No such library")
endif()

string(COMPARE EQUAL "${CMAKE_CXX_COMPILER_ID}" "Clang" compiler_is_clang)

if(APPLE)
  set(toolset_name darwin)
elseif(CMAKE_COMPILER_IS_GNUCXX)
  set(toolset_name gcc)
elseif(compiler_is_clang)
  set(toolset_name clang)
elseif(MSVC)
  set(toolset_name msvc)
else()
  hunter_fatal_error(
      "TODO: set toolset for boost"
      WIKI "https://github.com/ruslo/hunter/wiki/Error-%28boost-toolset%29"
  )
endif()

if(MSVC)
  set(env_cmd "@HUNTER_MSVC_VCVARSALL@" "@HUNTER_MSVC_ARCH@")
else()
  set(env_cmd "")
endif()

if(MSVC)
  set(boost_compiler cl)
else()
  set(boost_compiler "${CMAKE_CXX_COMPILER}")
endif()

string(COMPARE EQUAL "@HUNTER_PACKAGE_COMPONENT@" "mpi" is_mpi)
if(is_mpi)
  set(using_mpi "using mpi ;")
  if(MSVC)
    find_package(MPI)
    if(NOT MPI_CXX_FOUND)
      # Fix concurrent output to console
      execute_process(
          COMMAND
          "${CMAKE_COMMAND}"
          -E
          echo
          "MPI is required. Please install it. For example MS-MPI: "
          "http://msdn.microsoft.com/en-us/library/bb524831%28v=vs.85%29.aspx"
          "WIKI: https://github.com/ruslo/hunter/wiki/Error-%28boost-mpi-on-windows%29"
      )
      hunter_fatal_error(
          "MPI is required"
          WIKI
          "https://github.com/ruslo/hunter/wiki/Error-%28boost-mpi-on-windows%29"
      )
    endif()
    get_filename_component(MPI_DIR "${MPI_CXX_INCLUDE_PATH}/.." ABSOLUTE)
    string(REPLACE "/" "\\\\" MPI_DIR "${MPI_DIR}")
    configure_file(
        "@HUNTER_SELF@/scripts/mpi.jam"
        "@HUNTER_PACKAGE_SOURCE_DIR@/tools/build/v2/tools/mpi.jam"
    )
  endif()
  set(variants variant=release) # build bug
else()
  set(using_mpi "")
  set(variants variant=debug,release)
endif()

set(boost_user_jam "@HUNTER_BASE@/boost.user.jam")
file(
     WRITE
     ${boost_user_jam}
     "using ${toolset_name} :\n"
     "    : \"${boost_compiler}\"\n"
     ";\n"
     "${using_mpi}\n"
)

if(MSVC)
  # Disable auto-linking
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /DBOOST_ALL_NO_LIB=1")

  # Fix some compile errors
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /DNOMINMAX")
endif()

if("@HUNTER_ENABLE_BOOST_SHARED@")
  set(link_opts link=static,shared)
else()
  set(link_opts link=static)
endif()

set(
    build_opts
    -a
    ${link_opts}
    threading=multi
    ${variants}
    --layout=tagged
    toolset=${toolset_name}
    "--user-config=${boost_user_jam}"
    --with-@HUNTER_PACKAGE_COMPONENT@
)

if(CMAKE_CXX_FLAGS)
  list(APPEND build_opts "cxxflags=${CMAKE_CXX_FLAGS}")
endif()

if(CMAKE_EXE_LINKER_FLAGS)
  list(APPEND build_opts "linkflags=${CMAKE_EXE_LINKER_FLAGS}")
endif()

string(COMPARE EQUAL "@HUNTER_MSVC_ARCH@" "amd64" is_x64)
if(MSVC AND is_x64)
  list(APPEND build_opts "address-model=64")
endif()

if(@HUNTER_STATUS_DEBUG@)
  set(verbose_output "-d+2 --debug-configuration")
endif()

if(MSVC)
  set(bootstrap_cmd "bootstrap.bat")
  set(b2_cmd "b2")
else()
  set(bootstrap_cmd "./bootstrap.sh")
  set(b2_cmd "./b2")
endif()

file(READ "${boost_user_jam}" USER_JAM_CONTENT)

if(HUNTER_STATUS_DEBUG)
  message("Build options:")
  foreach(opt ${build_opts})
    message("  ${opt}")
  endforeach()
  message("------")
  message("Boost user jam config:")
  message("------")
  message("${USER_JAM_CONTENT}")
  message("------")
endif()

ExternalProject_Add(
    @HUNTER_PACKAGE_BASENAME@
    URL
    DOWNLOAD_COMMAND
    ${CMAKE_COMMAND} -E echo "Skip download"
    DOWNLOAD_DIR
    "@HUNTER_PACKAGE_DOWNLOAD_DIR@"
    SOURCE_DIR
    "@HUNTER_PACKAGE_SOURCE_DIR@"
    INSTALL_DIR
    "@HUNTER_PACKAGE_INSTALL_DIR@"
        # not used, just avoid creating Install/<name> empty directory
    CONFIGURE_COMMAND
    ${env_cmd}
    COMMAND
    ${bootstrap_cmd}
    BUILD_COMMAND
    ${b2_cmd}
    ${verbose_output}
    ${build_opts}
    BUILD_IN_SOURCE
    1
    INSTALL_COMMAND
    ${b2_cmd}
    -d0
    ${build_opts}
    stage # install only libraries, headers installed in `url_sha1_boost`
    "--stagedir=@HUNTER_PACKAGE_INSTALL_DIR@"
)

if(APPLE)
  find_package(PythonInterp 3.2 REQUIRED)
  ExternalProject_Add_Step(
      @HUNTER_PACKAGE_BASENAME@
      FixDylibId
      COMMAND
      "${PYTHON_EXECUTABLE}"
      "@HUNTER_SELF@/scripts/fix-boost-dylib-id.py"
      "--install-dir"
      "@HUNTER_PACKAGE_INSTALL_DIR@/lib"
      DEPENDEES
      install
  )
endif()
