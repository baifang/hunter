# Copyright (c) 2013, Ruslan Baratov
# All rights reserved.

cmake_minimum_required(VERSION 3.0)

include(ExternalProject) # ExternalProject_Add

# Scheme for download boost and install header-only libraries (no build step)

list(APPEND CMAKE_MODULE_PATH "@HUNTER_SELF@/cmake/modules")

include(hunter_assert_lists_equal)
include(hunter_status_debug)
include(hunter_test_string_not_empty)

hunter_status_debug("Scheme: url_sha1_boost")

# Check preconditions
hunter_test_string_not_empty("@HUNTER_SELF@")
hunter_test_string_not_empty("@HUNTER_BASE@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_BASENAME@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_URL@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_SHA1@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_DOWNLOAD_DIR@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_SOURCE_DIR@")
hunter_test_string_not_empty("@HUNTER_PACKAGE_INSTALL_DIR@")
hunter_test_string_not_empty("@HUNTER_Boost_VERSION@")
if(MSVC)
  hunter_test_string_not_empty("@HUNTER_MSVC_ARCH@")
  hunter_test_string_not_empty("@HUNTER_MSVC_VCVARSALL@")
endif()

hunter_assert_lists_equal(@HUNTER_DOWNLOAD_SCHEME_VARIANTS@)

set_directory_properties(
    PROPERTIES
    EP_BASE
    "@HUNTER_BASE@"
)

set(
    boost_libs
    atomic
    chrono
    context
    coroutine
    date_time
    exception
    filesystem
    graph
    graph_parallel
    iostreams
    locale
    log
    math
    mpi
    program_options
    python
    random
    regex
    serialization
    signals
    system
    test
    thread
    timer
    wave
)

# Same logic in all url_sha1_boost* schemes (TODO: DRY)
if(NOT @HUNTER_Boost_VERSION@ VERSION_LESS "1.56.0")
  # >= 1.56
  list(APPEND boost_libs container)
endif()

foreach(x ${boost_libs})
  list(APPEND boost_list "--without-${x}")
endforeach()

if(MSVC)
  set(env_cmd "@HUNTER_MSVC_VCVARSALL@" "@HUNTER_MSVC_ARCH@")
else()
  set(env_cmd "")
endif()

if(MSVC)
  set(install_cmd "b2")
  set(bootstrap_cmd "bootstrap.bat")
else()
  set(install_cmd "./b2")
  if(APPLE)
    # Clear Xcode environment
    set(
        bootstrap_cmd
        . "@HUNTER_SELF@/scripts/clear-all.sh" && ./bootstrap.sh
    )
  else()
    set(bootstrap_cmd "./bootstrap.sh")
  endif()
endif()

set(download_command "")
if(EXISTS "@HUNTER_PACKAGE_SOURCE_DIR@")
  set(stamp_dir "@HUNTER_BASE@/Stamp")
  file(GLOB_RECURSE install_touched "${stamp_dir}/Boost-*/*/Boost-*-install")
  if(NOT install_touched)
    file(GLOB_RECURSE install_touched "${stamp_dir}/Boost-*/Boost-*-install")
  endif()
  if(install_touched)
    hunter_status_debug(
        "Boost directory already unpacked: `@HUNTER_PACKAGE_SOURCE_DIR@` "
        "(skip download and unpack)"
    )
    set(
        download_command
        DOWNLOAD_COMMAND
        "${CMAKE_COMMAND}"
        -E
        echo
        "skip download and unpack"
    )
  endif()
endif()

ExternalProject_Add(
    @HUNTER_PACKAGE_BASENAME@
    URL
    @HUNTER_PACKAGE_URL@
    URL_HASH
    SHA1=@HUNTER_PACKAGE_SHA1@
    ${download_command}
    DOWNLOAD_DIR
    "@HUNTER_PACKAGE_DOWNLOAD_DIR@"
    SOURCE_DIR
    "@HUNTER_PACKAGE_SOURCE_DIR@"
    INSTALL_DIR
    "@HUNTER_PACKAGE_INSTALL_DIR@"
        # not used, just avoid creating Install/<name> empty directory
    CONFIGURE_COMMAND
    ${env_cmd}
    COMMAND
    ${bootstrap_cmd}
    BUILD_COMMAND
    "${CMAKE_COMMAND}" -E echo "build skipped"
    BUILD_IN_SOURCE
    1
    INSTALL_COMMAND
    ${install_cmd}
    --layout=tagged
    -d0
    install
    ${boost_list}
    "--prefix=@HUNTER_PACKAGE_INSTALL_DIR@"
)
